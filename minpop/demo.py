# %%
import pyscf
import numpy as np
import pyscf.lo
import io
import pyscf.gto
import scipy.linalg


def minpop(calculation: pyscf.scf.hf.SCF) -> np.ndarray:
    """Implements the minimum population localization method.

    Follows:
    A complete basis set model chemistry. VII. Use of the minimum population localization method
    J. A. Montgomery, Jr., M. J. Frisch, and J. W. Ochterski, G. A. Petersson
    DOI 10.1063/1.481224, eqn 3
    correction: typo in eq 3: the S'^(-1/2) missing as prefactor

    Parameters
    ----------
    calculation : pyscf.scf.hf.SCF
        A PySCF calculator object after a converged SCF. May be of any subclass (e.g. RHF, UHF).

    Returns
    -------
    np.ndarray
        Populations on atoms. 2D, natoms x natoms.
    """
    twochannel = calculation.mo_coeff.ndim == 3
    minimal = pyscf.gto.M(atom=calculation.mol.atom, basis="STO-3G")

    Sbar = pyscf.gto.intor_cross("int1e_ovlp", minimal, calculation.mol)
    Sprime = minimal.intor("int1e_ovlp")
    Sprimeinv = np.linalg.inv(Sprime)
    labels = minimal.ao_labels(fmt=None)

    def get_population(mo_coeff, mo_occ):
        C = mo_coeff[:, mo_occ > 0]
        P = Sbar @ C
        Cprime = P @ scipy.linalg.sqrtm(np.linalg.inv(C.T @ Sbar.T @ Sprimeinv @ P))
        Cprime = Sprimeinv @ Cprime

        pm = pyscf.lo.PM(minimal, Cprime)
        pm.pop_method = "mulliken"
        loc_orb = pm.kernel()

        O = mo_occ[mo_occ > 0]
        dm = (loc_orb * O) @ loc_orb.T
        pop = np.einsum("ij,ji->ij", dm, Sprime).real

        population = np.zeros((minimal.natm, minimal.natm))
        for i, si in enumerate(labels):
            for j, sj in enumerate(labels):
                population[si[0], sj[0]] += pop[i, j]

        return population

    if twochannel:
        population_alpha = get_population(
            calculation.mo_coeff[0], calculation.mo_occ[0]
        )
        population_beta = get_population(calculation.mo_coeff[1], calculation.mo_occ[1])
        return population_alpha, population_beta
    else:
        if calculation.make_rdm1().ndim == 2:
            population = get_population(calculation.mo_coeff, calculation.mo_occ)
        else:
            # ROHF
            mo_occ = calculation.mo_occ.copy()
            mo_occ[mo_occ == 1] = 0
            population_same = get_population(calculation.mo_coeff, mo_occ)
            mo_occ = calculation.mo_occ.copy()
            mo_occ[mo_occ == 2] = 0
            if max(mo_occ) > 0:
                population_difference = get_population(calculation.mo_coeff, mo_occ)  #
            else:
                population_difference = 0
            return population_same / 2 + population_difference, population_same / 2
        return population


def test_refvalue():
    expected = b"""4.666698422564493853e+00 3.328309419908166977e-01 -2.536322754551907990e-02 8.468352021290422287e-04 1.426041824913102090e-03 -2.527656000146624379e-02 -1.728593461502366761e-03 3.801435749526757002e-01 3.825927880456000407e-01 3.801428762805373895e-01 -1.465537130959713389e-03 -1.752286938994341789e-05 -2.147372813029495221e-05 -2.142809717925411742e-05 1.507381289557632659e-05
3.328309419908166422e-01 6.382457714081344768e+00 4.121917575670945300e-01 -4.531900430355957632e-02 -6.411211514655054677e-02 3.995277175716500651e-01 -2.113095396211587748e-02 -2.289276592746668573e-02 -2.088834280130299689e-02 -2.289312570471968220e-02 -2.370363830496060448e-02 1.113092328121627729e-03 -1.107545864709498160e-03 -1.108355490974264387e-03 9.426303837301457144e-04
-2.536322754551908337e-02 4.121917575670945300e-01 4.737043254495979738e+00 4.867354339369313054e-01 -8.227499515907749084e-02 -7.557580479221449876e-02 1.257018467300605917e-03 7.827250906868221583e-04 -4.412150264012467370e-03 7.825895038038757721e-04 3.931407429830532929e-01 2.678752120229999523e-03 2.504267174007577000e-05 2.504326579908231268e-05 -2.975712557188968846e-05
8.468352021290420119e-04 -4.531900430355956938e-02 4.867354339369312499e-01 6.649471244721862462e+00 4.057875215525877377e-01 -4.495966673610214681e-02 5.434143692674552484e-04 -1.607554705454654069e-05 2.895463953665116335e-05 -1.607392930288995396e-05 -1.996202733983964278e-02 -2.048451329400479207e-02 -1.371984705233562698e-05 -1.372477631254651997e-05 1.919069004518766789e-05
1.426041824913101873e-03 -6.411211514655054677e-02 -8.227499515907751859e-02 4.057875215525877932e-01 4.855943795765742976e+00 5.512385390284293418e-01 -1.833044685271829205e-02 2.276123256207398667e-05 -3.863887712031121549e-05 2.275093770919513737e-05 2.645836179986429774e-03 3.948884504369203352e-01 4.072094681230133996e-04 4.076727707107621196e-04 -3.016546725802259597e-03
-2.527656000146624032e-02 3.995277175716500651e-01 -7.557580479221449876e-02 -4.495966673610214681e-02 5.512385390284294528e-01 4.820390514478675392e+00 3.903519940821147394e-01 -1.521449809582920906e-03 1.474666007189245637e-03 -1.520627813493029105e-03 1.643343208818264130e-03 -2.342187617912714487e-02 -2.336075952260797256e-02 -2.336031268441541436e-02 -2.173420020602989666e-02
-1.728593461502366544e-03 -2.113095396211587401e-02 1.257018467300605917e-03 5.434143692674553569e-04 -1.833044685271829552e-02 3.903519940821147394e-01 4.744194847857675867e+00 1.235527481101855881e-05 1.810763638535455383e-05 1.224733761220862262e-05 -1.510147657088573271e-05 -8.609841437672495924e-04 3.764454794134631799e-01 3.764464028350573699e-01 3.806833625598501358e-01
3.801435749526757002e-01 -2.289276592746668573e-02 7.827250906868221583e-04 -1.607554705454654069e-05 2.276123256207398667e-05 -1.521449809582920906e-03 1.235527481101855881e-05 5.860073195569532878e-01 -2.164287128487437858e-02 -2.589692022420169229e-02 -6.961433600927356952e-06 -3.173433428050142977e-07 2.402726592277960285e-04 -1.094214589100522199e-04 -1.660759341636527097e-06
3.825927880456000407e-01 -2.088834280130299689e-02 -4.412150264012467370e-03 2.895463953665116335e-05 -3.863887712031121549e-05 1.474666007189245637e-03 1.810763638535455383e-05 -2.164287128487437858e-02 5.751091926737779136e-01 -2.164356352917452125e-02 9.404893132067275625e-04 9.581821552540657887e-07 -1.148804900927014143e-06 -1.150963306891580904e-06 -3.997802970090731150e-07
3.801428762805373895e-01 -2.289312570471968220e-02 7.825895038038757721e-04 -1.607392930288995396e-05 2.275093770919513737e-05 -1.520627813493029105e-03 1.224733761220862262e-05 -2.589692022420169229e-02 -2.164356352917452125e-02 5.860095343271707335e-01 -6.955025654072603006e-06 -3.170117049586313827e-07 -1.093085181286342398e-04 2.402360632097723587e-04 -1.655286792970337443e-06
-1.465537130959713389e-03 -2.370363830496060448e-02 3.931407429830532929e-01 -1.996202733983964278e-02 2.645836179986429774e-03 1.643343208818264130e-03 -1.510147657088573271e-05 -6.961433600927356952e-06 9.404893132067275625e-04 -6.955025654072603006e-06 5.138592543624040943e-01 -3.537746275076389949e-05 -6.152653029963111563e-07 -6.159475746730854083e-07 8.293445336971019937e-07
-1.752286938994341789e-05 1.113092328121627729e-03 2.678752120229999523e-03 -2.048451329400479207e-02 3.948884504369203352e-01 -2.342187617912714487e-02 -8.609841437672495924e-04 -3.173433428050142977e-07 9.581821552540657887e-07 -3.170117049586313827e-07 -3.537746275076389949e-05 5.280682670139803525e-01 3.028672246503277989e-06 3.024503659423513770e-06 4.555575785069534847e-04
-2.147372813029495221e-05 -1.107545864709498160e-03 2.504267174007577000e-05 -1.371984705233562698e-05 4.072094681230133996e-04 -2.336075952260797256e-02 3.764454794134631799e-01 2.402726592277960285e-04 -1.148804900927014143e-06 -1.093085181286342398e-04 -6.152653029963111563e-07 3.028672246503277989e-06 6.030729471937615882e-01 -2.456692173941973228e-02 -2.129981276469336549e-02
-2.142809717925411742e-05 -1.108355490974264387e-03 2.504326579908231268e-05 -1.372477631254651997e-05 4.076727707107621196e-04 -2.336031268441541436e-02 3.764464028350573699e-01 -1.094214589100522199e-04 -1.150963306891580904e-06 2.402360632097723587e-04 -6.159475746730854083e-07 3.024503659423513770e-06 -2.456692173941973228e-02 6.030735312434254425e-01 -2.129921039002605557e-02
1.507381289557632659e-05 9.426303837301457144e-04 -2.975712557188968846e-05 1.919069004518766789e-05 -3.016546725802259597e-03 -2.173420020602989666e-02 3.806833625598501358e-01 -1.660759341636527097e-06 -3.997802970090731150e-07 -1.655286792970337443e-06 8.293445336971019937e-07 4.555575785069534847e-04 -2.129981276469336549e-02 -2.129921039002605557e-02 5.814591885801845272e-01"""
    expected = np.genfromtxt(io.BytesIO(expected))
    atomspec = "C 0.0234395981 1.4453430312 0.0421084617; N 0.0060615134 -0.0040415917 0.0263854155; C -0.0316410872 -0.8101470708 -1.0814610232; N -0.0384525996 -2.0830828391 -0.7654487215; C -0.0036644281 -2.112212563 0.6106291669; C 0.0245145326 -0.840819084 1.1314103328; C 0.0662206077 -0.3342545716 2.5315941013; H 0.9288495405 1.8213133306 0.5246315853; H 0.0015391082 1.8077786327 -0.9849482601; H -0.8471947544 1.8421269737 0.5698487241; H -0.052384671 -0.4013270272 -2.0807335516; H -0.0006359715 -3.0436425281 1.1559702974; H 0.9618887011 0.265076309 2.7282689421; H -0.8038186086 0.2859969856 2.7732882023; H 0.0738803686 -1.1769220771 3.223600787"
    calculation = pyscf.scf.RHF(pyscf.gto.M(atom=atomspec, basis="6-31+G"))
    calculation.kernel()
    actual = minpop(calculation)
    assert np.allclose(actual, expected, atol=1e-14)


def test_UHF():
    atomspec = """C 0.122391 0.0 0.088352
    H -0.125474 0.0 1.136866
    H 1.039556 0.0 -0.477002"""
    calculation = pyscf.scf.UHF(pyscf.gto.M(atom=atomspec, basis="6-31+G", spin=2))
    calculation.kernel()

    actual = minpop(calculation)
    expected_alpha = b"""3.886592882417463812e+00 1.716043296098384296e-01 1.716043867730661088e-01
1.716043296098384019e-01 2.208935408180371374e-01 -7.398647077781335575e-03
1.716043867730661365e-01 -7.398647077781335575e-03 2.208934381542567993e-01"""

    expected_beta = b"""1.628031952438166563e+00 1.990799260906662704e-01 1.990800072660503794e-01
1.990799260906662427e-01 2.988420498607952114e-01 -1.101784134782726049e-02
1.990800072660503794e-01 -1.101784134782726049e-02 2.988418136832626248e-01"""

    assert np.allclose(actual[0], np.genfromtxt(io.BytesIO(expected_alpha)), atol=1e-14)
    assert np.allclose(actual[1], np.genfromtxt(io.BytesIO(expected_beta)), atol=1e-14)


def test_ROHF_mult_1():
    atomspec = """C 0.0 0.0 0.17535
 H 0.0 0.86051 -0.52606
 H 0.0 -0.86051 -0.52606"""
    calculation = pyscf.scf.ROHF(pyscf.gto.M(atom=atomspec, basis="6-31+G", spin=0))
    calculation.kernel()
    actual = minpop(calculation)

    expected = b"""5.498817636760263 0.328572504892756 0.328572504892756
 0.328572504892756 0.627368400521873 -0.033922228687513
 0.328572504892756 -0.033922228687513 0.627368400521873"""
    actual = actual[0] + actual[1]
    assert np.allclose(actual, np.genfromtxt(io.BytesIO(expected)), atol=1e-14)


def test_ROHF_mult_3():
    atomspec = """C 0.12239 0.0 0.08835 
 H -0.12547 0.0 1.13687 
 H 1.03956 0.0 -0.477"""
    mol = pyscf.gto.M(atom=atomspec, basis="6-31+G", spin=2)
    mol.cart = True
    calculation = pyscf.scf.ROHF(mol)
    calculation.kernel()
    actual = minpop(calculation)

    expected_alpha = b"""
3.759982745966387  0.17640216301273   0.176402409880398
0.17640216301273   0.274403368849757 -0.007198958246232
0.176402409880398 -0.007198958246232  0.274402655890061"""
    expected_beta = b"""1.759440270904161 0.19448955669746 0.194489822156817
 0.19448955669746   0.242377946778904 -0.011077174413572
 0.194489822156817 -0.011077174413572  0.242377373435523"""

    assert np.allclose(actual[0], np.genfromtxt(io.BytesIO(expected_alpha)), atol=1e-14)
    assert np.allclose(actual[1], np.genfromtxt(io.BytesIO(expected_beta)), atol=1e-14)


test_refvalue()
test_UHF()
test_ROHF_mult_1()
test_ROHF_mult_3()


# %%
